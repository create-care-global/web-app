// Code generated by Prisma (prisma@1.33.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  project: (where?: ProjectWhereInput) => Promise<boolean>;
  projectCategory: (where?: ProjectCategoryWhereInput) => Promise<boolean>;
  projectCharacteristic: (
    where?: ProjectCharacteristicWhereInput
  ) => Promise<boolean>;
  projectCharacteristicGroup: (
    where?: ProjectCharacteristicGroupWhereInput
  ) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  project: (where: ProjectWhereUniqueInput) => ProjectNullablePromise;
  projects: (args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Project>;
  projectsConnection: (args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProjectConnectionPromise;
  projectCategory: (
    where: ProjectCategoryWhereUniqueInput
  ) => ProjectCategoryNullablePromise;
  projectCategories: (args?: {
    where?: ProjectCategoryWhereInput;
    orderBy?: ProjectCategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ProjectCategory>;
  projectCategoriesConnection: (args?: {
    where?: ProjectCategoryWhereInput;
    orderBy?: ProjectCategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProjectCategoryConnectionPromise;
  projectCharacteristic: (
    where: ProjectCharacteristicWhereUniqueInput
  ) => ProjectCharacteristicNullablePromise;
  projectCharacteristics: (args?: {
    where?: ProjectCharacteristicWhereInput;
    orderBy?: ProjectCharacteristicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ProjectCharacteristic>;
  projectCharacteristicsConnection: (args?: {
    where?: ProjectCharacteristicWhereInput;
    orderBy?: ProjectCharacteristicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProjectCharacteristicConnectionPromise;
  projectCharacteristicGroup: (
    where: ProjectCharacteristicGroupWhereUniqueInput
  ) => ProjectCharacteristicGroupNullablePromise;
  projectCharacteristicGroups: (args?: {
    where?: ProjectCharacteristicGroupWhereInput;
    orderBy?: ProjectCharacteristicGroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ProjectCharacteristicGroup>;
  projectCharacteristicGroupsConnection: (args?: {
    where?: ProjectCharacteristicGroupWhereInput;
    orderBy?: ProjectCharacteristicGroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProjectCharacteristicGroupConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createProject: (data: ProjectCreateInput) => ProjectPromise;
  updateProject: (args: {
    data: ProjectUpdateInput;
    where: ProjectWhereUniqueInput;
  }) => ProjectPromise;
  updateManyProjects: (args: {
    data: ProjectUpdateManyMutationInput;
    where?: ProjectWhereInput;
  }) => BatchPayloadPromise;
  upsertProject: (args: {
    where: ProjectWhereUniqueInput;
    create: ProjectCreateInput;
    update: ProjectUpdateInput;
  }) => ProjectPromise;
  deleteProject: (where: ProjectWhereUniqueInput) => ProjectPromise;
  deleteManyProjects: (where?: ProjectWhereInput) => BatchPayloadPromise;
  createProjectCategory: (
    data: ProjectCategoryCreateInput
  ) => ProjectCategoryPromise;
  updateProjectCategory: (args: {
    data: ProjectCategoryUpdateInput;
    where: ProjectCategoryWhereUniqueInput;
  }) => ProjectCategoryPromise;
  updateManyProjectCategories: (args: {
    data: ProjectCategoryUpdateManyMutationInput;
    where?: ProjectCategoryWhereInput;
  }) => BatchPayloadPromise;
  upsertProjectCategory: (args: {
    where: ProjectCategoryWhereUniqueInput;
    create: ProjectCategoryCreateInput;
    update: ProjectCategoryUpdateInput;
  }) => ProjectCategoryPromise;
  deleteProjectCategory: (
    where: ProjectCategoryWhereUniqueInput
  ) => ProjectCategoryPromise;
  deleteManyProjectCategories: (
    where?: ProjectCategoryWhereInput
  ) => BatchPayloadPromise;
  createProjectCharacteristic: (
    data: ProjectCharacteristicCreateInput
  ) => ProjectCharacteristicPromise;
  updateProjectCharacteristic: (args: {
    data: ProjectCharacteristicUpdateInput;
    where: ProjectCharacteristicWhereUniqueInput;
  }) => ProjectCharacteristicPromise;
  updateManyProjectCharacteristics: (args: {
    data: ProjectCharacteristicUpdateManyMutationInput;
    where?: ProjectCharacteristicWhereInput;
  }) => BatchPayloadPromise;
  upsertProjectCharacteristic: (args: {
    where: ProjectCharacteristicWhereUniqueInput;
    create: ProjectCharacteristicCreateInput;
    update: ProjectCharacteristicUpdateInput;
  }) => ProjectCharacteristicPromise;
  deleteProjectCharacteristic: (
    where: ProjectCharacteristicWhereUniqueInput
  ) => ProjectCharacteristicPromise;
  deleteManyProjectCharacteristics: (
    where?: ProjectCharacteristicWhereInput
  ) => BatchPayloadPromise;
  createProjectCharacteristicGroup: (
    data: ProjectCharacteristicGroupCreateInput
  ) => ProjectCharacteristicGroupPromise;
  updateProjectCharacteristicGroup: (args: {
    data: ProjectCharacteristicGroupUpdateInput;
    where: ProjectCharacteristicGroupWhereUniqueInput;
  }) => ProjectCharacteristicGroupPromise;
  updateManyProjectCharacteristicGroups: (args: {
    data: ProjectCharacteristicGroupUpdateManyMutationInput;
    where?: ProjectCharacteristicGroupWhereInput;
  }) => BatchPayloadPromise;
  upsertProjectCharacteristicGroup: (args: {
    where: ProjectCharacteristicGroupWhereUniqueInput;
    create: ProjectCharacteristicGroupCreateInput;
    update: ProjectCharacteristicGroupUpdateInput;
  }) => ProjectCharacteristicGroupPromise;
  deleteProjectCharacteristicGroup: (
    where: ProjectCharacteristicGroupWhereUniqueInput
  ) => ProjectCharacteristicGroupPromise;
  deleteManyProjectCharacteristicGroups: (
    where?: ProjectCharacteristicGroupWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  project: (
    where?: ProjectSubscriptionWhereInput
  ) => ProjectSubscriptionPayloadSubscription;
  projectCategory: (
    where?: ProjectCategorySubscriptionWhereInput
  ) => ProjectCategorySubscriptionPayloadSubscription;
  projectCharacteristic: (
    where?: ProjectCharacteristicSubscriptionWhereInput
  ) => ProjectCharacteristicSubscriptionPayloadSubscription;
  projectCharacteristicGroup: (
    where?: ProjectCharacteristicGroupSubscriptionWhereInput
  ) => ProjectCharacteristicGroupSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type SourceOfItems = "LOCAL" | "DIRECT" | "OTHER";

export type ProjectCharacteristicOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type ProjectState = "PENDING" | "APPROVED" | "SOLVING" | "COMPLETED";

export type ProjectOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "sourceOfItems_ASC"
  | "sourceOfItems_DESC"
  | "amountOfKidsHelped_ASC"
  | "amountOfKidsHelped_DESC"
  | "whyIsThisImportant_ASC"
  | "whyIsThisImportant_DESC"
  | "meaningToTheKids_ASC"
  | "meaningToTheKids_DESC"
  | "microNeed_ASC"
  | "microNeed_DESC"
  | "numberOfItems_ASC"
  | "numberOfItems_DESC"
  | "estimatedCost_ASC"
  | "estimatedCost_DESC"
  | "personalMessage_ASC"
  | "personalMessage_DESC"
  | "state_ASC"
  | "state_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type ProjectCategoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type ProjectCharacteristicGroupOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "displayName_ASC"
  | "displayName_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "password_ASC"
  | "password_DESC"
  | "userGroup_ASC"
  | "userGroup_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface ProjectCharacteristicGroupCreateWithoutItemsInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export type ProjectWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ProjectCharacteristicUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface ProjectCharacteristicScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    | ProjectCharacteristicScalarWhereInput[]
    | ProjectCharacteristicScalarWhereInput
  >;
  OR?: Maybe<
    | ProjectCharacteristicScalarWhereInput[]
    | ProjectCharacteristicScalarWhereInput
  >;
  NOT?: Maybe<
    | ProjectCharacteristicScalarWhereInput[]
    | ProjectCharacteristicScalarWhereInput
  >;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  displayName?: Maybe<String>;
  displayName_not?: Maybe<String>;
  displayName_in?: Maybe<String[] | String>;
  displayName_not_in?: Maybe<String[] | String>;
  displayName_lt?: Maybe<String>;
  displayName_lte?: Maybe<String>;
  displayName_gt?: Maybe<String>;
  displayName_gte?: Maybe<String>;
  displayName_contains?: Maybe<String>;
  displayName_not_contains?: Maybe<String>;
  displayName_starts_with?: Maybe<String>;
  displayName_not_starts_with?: Maybe<String>;
  displayName_ends_with?: Maybe<String>;
  displayName_not_ends_with?: Maybe<String>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  userGroup?: Maybe<String>;
  userGroup_not?: Maybe<String>;
  userGroup_in?: Maybe<String[] | String>;
  userGroup_not_in?: Maybe<String[] | String>;
  userGroup_lt?: Maybe<String>;
  userGroup_lte?: Maybe<String>;
  userGroup_gt?: Maybe<String>;
  userGroup_gte?: Maybe<String>;
  userGroup_contains?: Maybe<String>;
  userGroup_not_contains?: Maybe<String>;
  userGroup_starts_with?: Maybe<String>;
  userGroup_not_starts_with?: Maybe<String>;
  userGroup_ends_with?: Maybe<String>;
  userGroup_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface ProjectCharacteristicUpdateManyInput {
  create?: Maybe<
    ProjectCharacteristicCreateInput[] | ProjectCharacteristicCreateInput
  >;
  update?: Maybe<
    | ProjectCharacteristicUpdateWithWhereUniqueNestedInput[]
    | ProjectCharacteristicUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | ProjectCharacteristicUpsertWithWhereUniqueNestedInput[]
    | ProjectCharacteristicUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<
    | ProjectCharacteristicWhereUniqueInput[]
    | ProjectCharacteristicWhereUniqueInput
  >;
  connect?: Maybe<
    | ProjectCharacteristicWhereUniqueInput[]
    | ProjectCharacteristicWhereUniqueInput
  >;
  set?: Maybe<
    | ProjectCharacteristicWhereUniqueInput[]
    | ProjectCharacteristicWhereUniqueInput
  >;
  disconnect?: Maybe<
    | ProjectCharacteristicWhereUniqueInput[]
    | ProjectCharacteristicWhereUniqueInput
  >;
  deleteMany?: Maybe<
    | ProjectCharacteristicScalarWhereInput[]
    | ProjectCharacteristicScalarWhereInput
  >;
  updateMany?: Maybe<
    | ProjectCharacteristicUpdateManyWithWhereNestedInput[]
    | ProjectCharacteristicUpdateManyWithWhereNestedInput
  >;
}

export interface ProjectCharacteristicUpdateInput {
  name?: Maybe<String>;
  group?: Maybe<ProjectCharacteristicGroupUpdateOneWithoutItemsInput>;
}

export interface ProjectCharacteristicGroupWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  items_every?: Maybe<ProjectCharacteristicWhereInput>;
  items_some?: Maybe<ProjectCharacteristicWhereInput>;
  items_none?: Maybe<ProjectCharacteristicWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    | ProjectCharacteristicGroupWhereInput[]
    | ProjectCharacteristicGroupWhereInput
  >;
  OR?: Maybe<
    | ProjectCharacteristicGroupWhereInput[]
    | ProjectCharacteristicGroupWhereInput
  >;
  NOT?: Maybe<
    | ProjectCharacteristicGroupWhereInput[]
    | ProjectCharacteristicGroupWhereInput
  >;
}

export interface ProjectCategoryUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface ProjectCategoryWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ProjectCategoryWhereInput[] | ProjectCategoryWhereInput>;
  OR?: Maybe<ProjectCategoryWhereInput[] | ProjectCategoryWhereInput>;
  NOT?: Maybe<ProjectCategoryWhereInput[] | ProjectCategoryWhereInput>;
}

export interface ProjectCategoryUpdateInput {
  name?: Maybe<String>;
}

export interface ProjectCharacteristicGroupSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProjectCharacteristicGroupWhereInput>;
  AND?: Maybe<
    | ProjectCharacteristicGroupSubscriptionWhereInput[]
    | ProjectCharacteristicGroupSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ProjectCharacteristicGroupSubscriptionWhereInput[]
    | ProjectCharacteristicGroupSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ProjectCharacteristicGroupSubscriptionWhereInput[]
    | ProjectCharacteristicGroupSubscriptionWhereInput
  >;
}

export interface ProjectUpdateManyMutationInput {
  title?: Maybe<String>;
  sourceOfItems?: Maybe<SourceOfItems>;
  amountOfKidsHelped?: Maybe<Int>;
  whyIsThisImportant?: Maybe<String>;
  meaningToTheKids?: Maybe<String>;
  microNeed?: Maybe<String>;
  numberOfItems?: Maybe<Int>;
  estimatedCost?: Maybe<Int>;
  personalMessage?: Maybe<String>;
  state?: Maybe<ProjectState>;
}

export interface ProjectCategorySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProjectCategoryWhereInput>;
  AND?: Maybe<
    | ProjectCategorySubscriptionWhereInput[]
    | ProjectCategorySubscriptionWhereInput
  >;
  OR?: Maybe<
    | ProjectCategorySubscriptionWhereInput[]
    | ProjectCategorySubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ProjectCategorySubscriptionWhereInput[]
    | ProjectCategorySubscriptionWhereInput
  >;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  displayName?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  password?: Maybe<String>;
  userGroup?: Maybe<String>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  displayName?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  password?: Maybe<String>;
  userGroup?: Maybe<String>;
}

export interface ProjectCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  category: ProjectCategoryCreateOneInput;
  characteristics?: Maybe<ProjectCharacteristicCreateManyInput>;
  sourceOfItems: SourceOfItems;
  amountOfKidsHelped: Int;
  whyIsThisImportant: String;
  meaningToTheKids: String;
  microNeed: String;
  numberOfItems: Int;
  estimatedCost: Int;
  personalMessage: String;
  state: ProjectState;
}

export interface ProjectCharacteristicGroupUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface ProjectCategoryCreateOneInput {
  create?: Maybe<ProjectCategoryCreateInput>;
  connect?: Maybe<ProjectCategoryWhereUniqueInput>;
}

export type ProjectCharacteristicWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ProjectCategoryCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface ProjectCharacteristicUpdateWithWhereUniqueWithoutGroupInput {
  where: ProjectCharacteristicWhereUniqueInput;
  data: ProjectCharacteristicUpdateWithoutGroupDataInput;
}

export interface ProjectCharacteristicCreateManyInput {
  create?: Maybe<
    ProjectCharacteristicCreateInput[] | ProjectCharacteristicCreateInput
  >;
  connect?: Maybe<
    | ProjectCharacteristicWhereUniqueInput[]
    | ProjectCharacteristicWhereUniqueInput
  >;
}

export type ProjectCharacteristicGroupWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ProjectCharacteristicCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  group?: Maybe<ProjectCharacteristicGroupCreateOneWithoutItemsInput>;
}

export interface ProjectCharacteristicCreateWithoutGroupInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface ProjectCharacteristicGroupCreateOneWithoutItemsInput {
  create?: Maybe<ProjectCharacteristicGroupCreateWithoutItemsInput>;
  connect?: Maybe<ProjectCharacteristicGroupWhereUniqueInput>;
}

export interface ProjectCharacteristicGroupCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  items?: Maybe<ProjectCharacteristicCreateManyWithoutGroupInput>;
}

export interface ProjectCharacteristicUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface ProjectUpdateInput {
  title?: Maybe<String>;
  category?: Maybe<ProjectCategoryUpdateOneRequiredInput>;
  characteristics?: Maybe<ProjectCharacteristicUpdateManyInput>;
  sourceOfItems?: Maybe<SourceOfItems>;
  amountOfKidsHelped?: Maybe<Int>;
  whyIsThisImportant?: Maybe<String>;
  meaningToTheKids?: Maybe<String>;
  microNeed?: Maybe<String>;
  numberOfItems?: Maybe<Int>;
  estimatedCost?: Maybe<Int>;
  personalMessage?: Maybe<String>;
  state?: Maybe<ProjectState>;
}

export interface ProjectCharacteristicWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  group?: Maybe<ProjectCharacteristicGroupWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    ProjectCharacteristicWhereInput[] | ProjectCharacteristicWhereInput
  >;
  OR?: Maybe<
    ProjectCharacteristicWhereInput[] | ProjectCharacteristicWhereInput
  >;
  NOT?: Maybe<
    ProjectCharacteristicWhereInput[] | ProjectCharacteristicWhereInput
  >;
}

export interface ProjectCategoryUpdateOneRequiredInput {
  create?: Maybe<ProjectCategoryCreateInput>;
  update?: Maybe<ProjectCategoryUpdateDataInput>;
  upsert?: Maybe<ProjectCategoryUpsertNestedInput>;
  connect?: Maybe<ProjectCategoryWhereUniqueInput>;
}

export interface ProjectSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProjectWhereInput>;
  AND?: Maybe<ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput>;
  OR?: Maybe<ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput>;
  NOT?: Maybe<ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput>;
}

export interface ProjectCategoryUpdateDataInput {
  name?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  displayName?: Maybe<String>;
  firstName: String;
  lastName: String;
  password: String;
  userGroup: String;
}

export interface ProjectCategoryUpsertNestedInput {
  update: ProjectCategoryUpdateDataInput;
  create: ProjectCategoryCreateInput;
}

export interface ProjectCharacteristicUpdateWithoutGroupDataInput {
  name?: Maybe<String>;
}

export interface ProjectCharacteristicUpdateManyWithWhereNestedInput {
  where: ProjectCharacteristicScalarWhereInput;
  data: ProjectCharacteristicUpdateManyDataInput;
}

export interface ProjectCharacteristicGroupUpdateInput {
  name?: Maybe<String>;
  items?: Maybe<ProjectCharacteristicUpdateManyWithoutGroupInput>;
}

export interface ProjectCharacteristicUpdateWithWhereUniqueNestedInput {
  where: ProjectCharacteristicWhereUniqueInput;
  data: ProjectCharacteristicUpdateDataInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface ProjectCharacteristicUpdateDataInput {
  name?: Maybe<String>;
  group?: Maybe<ProjectCharacteristicGroupUpdateOneWithoutItemsInput>;
}

export interface ProjectCharacteristicSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProjectCharacteristicWhereInput>;
  AND?: Maybe<
    | ProjectCharacteristicSubscriptionWhereInput[]
    | ProjectCharacteristicSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ProjectCharacteristicSubscriptionWhereInput[]
    | ProjectCharacteristicSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ProjectCharacteristicSubscriptionWhereInput[]
    | ProjectCharacteristicSubscriptionWhereInput
  >;
}

export interface ProjectCharacteristicUpsertWithWhereUniqueNestedInput {
  where: ProjectCharacteristicWhereUniqueInput;
  update: ProjectCharacteristicUpdateDataInput;
  create: ProjectCharacteristicCreateInput;
}

export interface ProjectCharacteristicGroupUpsertWithoutItemsInput {
  update: ProjectCharacteristicGroupUpdateWithoutItemsDataInput;
  create: ProjectCharacteristicGroupCreateWithoutItemsInput;
}

export interface ProjectCharacteristicGroupUpdateWithoutItemsDataInput {
  name?: Maybe<String>;
}

export interface ProjectCharacteristicGroupUpdateOneWithoutItemsInput {
  create?: Maybe<ProjectCharacteristicGroupCreateWithoutItemsInput>;
  update?: Maybe<ProjectCharacteristicGroupUpdateWithoutItemsDataInput>;
  upsert?: Maybe<ProjectCharacteristicGroupUpsertWithoutItemsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ProjectCharacteristicGroupWhereUniqueInput>;
}

export type ProjectCategoryWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ProjectWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  category?: Maybe<ProjectCategoryWhereInput>;
  characteristics_every?: Maybe<ProjectCharacteristicWhereInput>;
  characteristics_some?: Maybe<ProjectCharacteristicWhereInput>;
  characteristics_none?: Maybe<ProjectCharacteristicWhereInput>;
  sourceOfItems?: Maybe<SourceOfItems>;
  sourceOfItems_not?: Maybe<SourceOfItems>;
  sourceOfItems_in?: Maybe<SourceOfItems[] | SourceOfItems>;
  sourceOfItems_not_in?: Maybe<SourceOfItems[] | SourceOfItems>;
  amountOfKidsHelped?: Maybe<Int>;
  amountOfKidsHelped_not?: Maybe<Int>;
  amountOfKidsHelped_in?: Maybe<Int[] | Int>;
  amountOfKidsHelped_not_in?: Maybe<Int[] | Int>;
  amountOfKidsHelped_lt?: Maybe<Int>;
  amountOfKidsHelped_lte?: Maybe<Int>;
  amountOfKidsHelped_gt?: Maybe<Int>;
  amountOfKidsHelped_gte?: Maybe<Int>;
  whyIsThisImportant?: Maybe<String>;
  whyIsThisImportant_not?: Maybe<String>;
  whyIsThisImportant_in?: Maybe<String[] | String>;
  whyIsThisImportant_not_in?: Maybe<String[] | String>;
  whyIsThisImportant_lt?: Maybe<String>;
  whyIsThisImportant_lte?: Maybe<String>;
  whyIsThisImportant_gt?: Maybe<String>;
  whyIsThisImportant_gte?: Maybe<String>;
  whyIsThisImportant_contains?: Maybe<String>;
  whyIsThisImportant_not_contains?: Maybe<String>;
  whyIsThisImportant_starts_with?: Maybe<String>;
  whyIsThisImportant_not_starts_with?: Maybe<String>;
  whyIsThisImportant_ends_with?: Maybe<String>;
  whyIsThisImportant_not_ends_with?: Maybe<String>;
  meaningToTheKids?: Maybe<String>;
  meaningToTheKids_not?: Maybe<String>;
  meaningToTheKids_in?: Maybe<String[] | String>;
  meaningToTheKids_not_in?: Maybe<String[] | String>;
  meaningToTheKids_lt?: Maybe<String>;
  meaningToTheKids_lte?: Maybe<String>;
  meaningToTheKids_gt?: Maybe<String>;
  meaningToTheKids_gte?: Maybe<String>;
  meaningToTheKids_contains?: Maybe<String>;
  meaningToTheKids_not_contains?: Maybe<String>;
  meaningToTheKids_starts_with?: Maybe<String>;
  meaningToTheKids_not_starts_with?: Maybe<String>;
  meaningToTheKids_ends_with?: Maybe<String>;
  meaningToTheKids_not_ends_with?: Maybe<String>;
  microNeed?: Maybe<String>;
  microNeed_not?: Maybe<String>;
  microNeed_in?: Maybe<String[] | String>;
  microNeed_not_in?: Maybe<String[] | String>;
  microNeed_lt?: Maybe<String>;
  microNeed_lte?: Maybe<String>;
  microNeed_gt?: Maybe<String>;
  microNeed_gte?: Maybe<String>;
  microNeed_contains?: Maybe<String>;
  microNeed_not_contains?: Maybe<String>;
  microNeed_starts_with?: Maybe<String>;
  microNeed_not_starts_with?: Maybe<String>;
  microNeed_ends_with?: Maybe<String>;
  microNeed_not_ends_with?: Maybe<String>;
  numberOfItems?: Maybe<Int>;
  numberOfItems_not?: Maybe<Int>;
  numberOfItems_in?: Maybe<Int[] | Int>;
  numberOfItems_not_in?: Maybe<Int[] | Int>;
  numberOfItems_lt?: Maybe<Int>;
  numberOfItems_lte?: Maybe<Int>;
  numberOfItems_gt?: Maybe<Int>;
  numberOfItems_gte?: Maybe<Int>;
  estimatedCost?: Maybe<Int>;
  estimatedCost_not?: Maybe<Int>;
  estimatedCost_in?: Maybe<Int[] | Int>;
  estimatedCost_not_in?: Maybe<Int[] | Int>;
  estimatedCost_lt?: Maybe<Int>;
  estimatedCost_lte?: Maybe<Int>;
  estimatedCost_gt?: Maybe<Int>;
  estimatedCost_gte?: Maybe<Int>;
  personalMessage?: Maybe<String>;
  personalMessage_not?: Maybe<String>;
  personalMessage_in?: Maybe<String[] | String>;
  personalMessage_not_in?: Maybe<String[] | String>;
  personalMessage_lt?: Maybe<String>;
  personalMessage_lte?: Maybe<String>;
  personalMessage_gt?: Maybe<String>;
  personalMessage_gte?: Maybe<String>;
  personalMessage_contains?: Maybe<String>;
  personalMessage_not_contains?: Maybe<String>;
  personalMessage_starts_with?: Maybe<String>;
  personalMessage_not_starts_with?: Maybe<String>;
  personalMessage_ends_with?: Maybe<String>;
  personalMessage_not_ends_with?: Maybe<String>;
  state?: Maybe<ProjectState>;
  state_not?: Maybe<ProjectState>;
  state_in?: Maybe<ProjectState[] | ProjectState>;
  state_not_in?: Maybe<ProjectState[] | ProjectState>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ProjectWhereInput[] | ProjectWhereInput>;
  OR?: Maybe<ProjectWhereInput[] | ProjectWhereInput>;
  NOT?: Maybe<ProjectWhereInput[] | ProjectWhereInput>;
}

export interface ProjectCharacteristicCreateManyWithoutGroupInput {
  create?: Maybe<
    | ProjectCharacteristicCreateWithoutGroupInput[]
    | ProjectCharacteristicCreateWithoutGroupInput
  >;
  connect?: Maybe<
    | ProjectCharacteristicWhereUniqueInput[]
    | ProjectCharacteristicWhereUniqueInput
  >;
}

export interface ProjectCharacteristicUpdateManyWithoutGroupInput {
  create?: Maybe<
    | ProjectCharacteristicCreateWithoutGroupInput[]
    | ProjectCharacteristicCreateWithoutGroupInput
  >;
  delete?: Maybe<
    | ProjectCharacteristicWhereUniqueInput[]
    | ProjectCharacteristicWhereUniqueInput
  >;
  connect?: Maybe<
    | ProjectCharacteristicWhereUniqueInput[]
    | ProjectCharacteristicWhereUniqueInput
  >;
  set?: Maybe<
    | ProjectCharacteristicWhereUniqueInput[]
    | ProjectCharacteristicWhereUniqueInput
  >;
  disconnect?: Maybe<
    | ProjectCharacteristicWhereUniqueInput[]
    | ProjectCharacteristicWhereUniqueInput
  >;
  update?: Maybe<
    | ProjectCharacteristicUpdateWithWhereUniqueWithoutGroupInput[]
    | ProjectCharacteristicUpdateWithWhereUniqueWithoutGroupInput
  >;
  upsert?: Maybe<
    | ProjectCharacteristicUpsertWithWhereUniqueWithoutGroupInput[]
    | ProjectCharacteristicUpsertWithWhereUniqueWithoutGroupInput
  >;
  deleteMany?: Maybe<
    | ProjectCharacteristicScalarWhereInput[]
    | ProjectCharacteristicScalarWhereInput
  >;
  updateMany?: Maybe<
    | ProjectCharacteristicUpdateManyWithWhereNestedInput[]
    | ProjectCharacteristicUpdateManyWithWhereNestedInput
  >;
}

export interface ProjectCharacteristicUpsertWithWhereUniqueWithoutGroupInput {
  where: ProjectCharacteristicWhereUniqueInput;
  update: ProjectCharacteristicUpdateWithoutGroupDataInput;
  create: ProjectCharacteristicCreateWithoutGroupInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  displayName?: String;
  firstName: String;
  lastName: String;
  password: String;
  userGroup: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  displayName: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  password: () => Promise<String>;
  userGroup: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  displayName: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  userGroup: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProjectCategoryConnection {
  pageInfo: PageInfo;
  edges: ProjectCategoryEdge[];
}

export interface ProjectCategoryConnectionPromise
  extends Promise<ProjectCategoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProjectCategoryEdge>>() => T;
  aggregate: <T = AggregateProjectCategoryPromise>() => T;
}

export interface ProjectCategoryConnectionSubscription
  extends Promise<AsyncIterator<ProjectCategoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProjectCategoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProjectCategorySubscription>() => T;
}

export interface ProjectCharacteristic {
  id: ID_Output;
  name: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface ProjectCharacteristicPromise
  extends Promise<ProjectCharacteristic>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  group: <T = ProjectCharacteristicGroupPromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ProjectCharacteristicSubscription
  extends Promise<AsyncIterator<ProjectCharacteristic>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  group: <T = ProjectCharacteristicGroupSubscription>() => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProjectCharacteristicNullablePromise
  extends Promise<ProjectCharacteristic | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  group: <T = ProjectCharacteristicGroupPromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ProjectCharacteristicGroup {
  id: ID_Output;
  name: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface ProjectCharacteristicGroupPromise
  extends Promise<ProjectCharacteristicGroup>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  items: <T = FragmentableArray<ProjectCharacteristic>>(args?: {
    where?: ProjectCharacteristicWhereInput;
    orderBy?: ProjectCharacteristicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ProjectCharacteristicGroupSubscription
  extends Promise<AsyncIterator<ProjectCharacteristicGroup>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  items: <
    T = Promise<AsyncIterator<ProjectCharacteristicSubscription>>
  >(args?: {
    where?: ProjectCharacteristicWhereInput;
    orderBy?: ProjectCharacteristicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProjectCharacteristicGroupNullablePromise
  extends Promise<ProjectCharacteristicGroup | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  items: <T = FragmentableArray<ProjectCharacteristic>>(args?: {
    where?: ProjectCharacteristicWhereInput;
    orderBy?: ProjectCharacteristicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProjectCharacteristicGroupPreviousValues {
  id: ID_Output;
  name: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface ProjectCharacteristicGroupPreviousValuesPromise
  extends Promise<ProjectCharacteristicGroupPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ProjectCharacteristicGroupPreviousValuesSubscription
  extends Promise<AsyncIterator<ProjectCharacteristicGroupPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProjectConnection {
  pageInfo: PageInfo;
  edges: ProjectEdge[];
}

export interface ProjectConnectionPromise
  extends Promise<ProjectConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProjectEdge>>() => T;
  aggregate: <T = AggregateProjectPromise>() => T;
}

export interface ProjectConnectionSubscription
  extends Promise<AsyncIterator<ProjectConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProjectEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProjectSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateProject {
  count: Int;
}

export interface AggregateProjectPromise
  extends Promise<AggregateProject>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProjectSubscription
  extends Promise<AsyncIterator<AggregateProject>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface ProjectEdge {
  node: Project;
  cursor: String;
}

export interface ProjectEdgePromise extends Promise<ProjectEdge>, Fragmentable {
  node: <T = ProjectPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProjectEdgeSubscription
  extends Promise<AsyncIterator<ProjectEdge>>,
    Fragmentable {
  node: <T = ProjectSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProjectCharacteristicGroup {
  count: Int;
}

export interface AggregateProjectCharacteristicGroupPromise
  extends Promise<AggregateProjectCharacteristicGroup>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProjectCharacteristicGroupSubscription
  extends Promise<AsyncIterator<AggregateProjectCharacteristicGroup>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Project {
  id: ID_Output;
  title: String;
  sourceOfItems: SourceOfItems;
  amountOfKidsHelped: Int;
  whyIsThisImportant: String;
  meaningToTheKids: String;
  microNeed: String;
  numberOfItems: Int;
  estimatedCost: Int;
  personalMessage: String;
  state: ProjectState;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface ProjectPromise extends Promise<Project>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  category: <T = ProjectCategoryPromise>() => T;
  characteristics: <T = FragmentableArray<ProjectCharacteristic>>(args?: {
    where?: ProjectCharacteristicWhereInput;
    orderBy?: ProjectCharacteristicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  sourceOfItems: () => Promise<SourceOfItems>;
  amountOfKidsHelped: () => Promise<Int>;
  whyIsThisImportant: () => Promise<String>;
  meaningToTheKids: () => Promise<String>;
  microNeed: () => Promise<String>;
  numberOfItems: () => Promise<Int>;
  estimatedCost: () => Promise<Int>;
  personalMessage: () => Promise<String>;
  state: () => Promise<ProjectState>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ProjectSubscription
  extends Promise<AsyncIterator<Project>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  category: <T = ProjectCategorySubscription>() => T;
  characteristics: <
    T = Promise<AsyncIterator<ProjectCharacteristicSubscription>>
  >(args?: {
    where?: ProjectCharacteristicWhereInput;
    orderBy?: ProjectCharacteristicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  sourceOfItems: () => Promise<AsyncIterator<SourceOfItems>>;
  amountOfKidsHelped: () => Promise<AsyncIterator<Int>>;
  whyIsThisImportant: () => Promise<AsyncIterator<String>>;
  meaningToTheKids: () => Promise<AsyncIterator<String>>;
  microNeed: () => Promise<AsyncIterator<String>>;
  numberOfItems: () => Promise<AsyncIterator<Int>>;
  estimatedCost: () => Promise<AsyncIterator<Int>>;
  personalMessage: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<ProjectState>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProjectNullablePromise
  extends Promise<Project | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  category: <T = ProjectCategoryPromise>() => T;
  characteristics: <T = FragmentableArray<ProjectCharacteristic>>(args?: {
    where?: ProjectCharacteristicWhereInput;
    orderBy?: ProjectCharacteristicOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  sourceOfItems: () => Promise<SourceOfItems>;
  amountOfKidsHelped: () => Promise<Int>;
  whyIsThisImportant: () => Promise<String>;
  meaningToTheKids: () => Promise<String>;
  microNeed: () => Promise<String>;
  numberOfItems: () => Promise<Int>;
  estimatedCost: () => Promise<Int>;
  personalMessage: () => Promise<String>;
  state: () => Promise<ProjectState>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ProjectCharacteristicGroupConnection {
  pageInfo: PageInfo;
  edges: ProjectCharacteristicGroupEdge[];
}

export interface ProjectCharacteristicGroupConnectionPromise
  extends Promise<ProjectCharacteristicGroupConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProjectCharacteristicGroupEdge>>() => T;
  aggregate: <T = AggregateProjectCharacteristicGroupPromise>() => T;
}

export interface ProjectCharacteristicGroupConnectionSubscription
  extends Promise<AsyncIterator<ProjectCharacteristicGroupConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ProjectCharacteristicGroupEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateProjectCharacteristicGroupSubscription>() => T;
}

export interface ProjectSubscriptionPayload {
  mutation: MutationType;
  node: Project;
  updatedFields: String[];
  previousValues: ProjectPreviousValues;
}

export interface ProjectSubscriptionPayloadPromise
  extends Promise<ProjectSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProjectPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProjectPreviousValuesPromise>() => T;
}

export interface ProjectSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProjectSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProjectSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProjectPreviousValuesSubscription>() => T;
}

export interface AggregateProjectCharacteristic {
  count: Int;
}

export interface AggregateProjectCharacteristicPromise
  extends Promise<AggregateProjectCharacteristic>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProjectCharacteristicSubscription
  extends Promise<AsyncIterator<AggregateProjectCharacteristic>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProjectPreviousValues {
  id: ID_Output;
  title: String;
  sourceOfItems: SourceOfItems;
  amountOfKidsHelped: Int;
  whyIsThisImportant: String;
  meaningToTheKids: String;
  microNeed: String;
  numberOfItems: Int;
  estimatedCost: Int;
  personalMessage: String;
  state: ProjectState;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface ProjectPreviousValuesPromise
  extends Promise<ProjectPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  sourceOfItems: () => Promise<SourceOfItems>;
  amountOfKidsHelped: () => Promise<Int>;
  whyIsThisImportant: () => Promise<String>;
  meaningToTheKids: () => Promise<String>;
  microNeed: () => Promise<String>;
  numberOfItems: () => Promise<Int>;
  estimatedCost: () => Promise<Int>;
  personalMessage: () => Promise<String>;
  state: () => Promise<ProjectState>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ProjectPreviousValuesSubscription
  extends Promise<AsyncIterator<ProjectPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  sourceOfItems: () => Promise<AsyncIterator<SourceOfItems>>;
  amountOfKidsHelped: () => Promise<AsyncIterator<Int>>;
  whyIsThisImportant: () => Promise<AsyncIterator<String>>;
  meaningToTheKids: () => Promise<AsyncIterator<String>>;
  microNeed: () => Promise<AsyncIterator<String>>;
  numberOfItems: () => Promise<AsyncIterator<Int>>;
  estimatedCost: () => Promise<AsyncIterator<Int>>;
  personalMessage: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<ProjectState>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProjectCharacteristicConnection {
  pageInfo: PageInfo;
  edges: ProjectCharacteristicEdge[];
}

export interface ProjectCharacteristicConnectionPromise
  extends Promise<ProjectCharacteristicConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProjectCharacteristicEdge>>() => T;
  aggregate: <T = AggregateProjectCharacteristicPromise>() => T;
}

export interface ProjectCharacteristicConnectionSubscription
  extends Promise<AsyncIterator<ProjectCharacteristicConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ProjectCharacteristicEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateProjectCharacteristicSubscription>() => T;
}

export interface ProjectCharacteristicGroupSubscriptionPayload {
  mutation: MutationType;
  node: ProjectCharacteristicGroup;
  updatedFields: String[];
  previousValues: ProjectCharacteristicGroupPreviousValues;
}

export interface ProjectCharacteristicGroupSubscriptionPayloadPromise
  extends Promise<ProjectCharacteristicGroupSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProjectCharacteristicGroupPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProjectCharacteristicGroupPreviousValuesPromise>() => T;
}

export interface ProjectCharacteristicGroupSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProjectCharacteristicGroupSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProjectCharacteristicGroupSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <
    T = ProjectCharacteristicGroupPreviousValuesSubscription
  >() => T;
}

export interface ProjectCategoryEdge {
  node: ProjectCategory;
  cursor: String;
}

export interface ProjectCategoryEdgePromise
  extends Promise<ProjectCategoryEdge>,
    Fragmentable {
  node: <T = ProjectCategoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProjectCategoryEdgeSubscription
  extends Promise<AsyncIterator<ProjectCategoryEdge>>,
    Fragmentable {
  node: <T = ProjectCategorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ProjectCategorySubscriptionPayload {
  mutation: MutationType;
  node: ProjectCategory;
  updatedFields: String[];
  previousValues: ProjectCategoryPreviousValues;
}

export interface ProjectCategorySubscriptionPayloadPromise
  extends Promise<ProjectCategorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProjectCategoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProjectCategoryPreviousValuesPromise>() => T;
}

export interface ProjectCategorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProjectCategorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProjectCategorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProjectCategoryPreviousValuesSubscription>() => T;
}

export interface User {
  id: ID_Output;
  email: String;
  displayName?: String;
  firstName: String;
  lastName: String;
  password: String;
  userGroup: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  displayName: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  password: () => Promise<String>;
  userGroup: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  displayName: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  userGroup: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  displayName: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  password: () => Promise<String>;
  userGroup: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ProjectCategory {
  id: ID_Output;
  name: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface ProjectCategoryPromise
  extends Promise<ProjectCategory>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ProjectCategorySubscription
  extends Promise<AsyncIterator<ProjectCategory>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProjectCategoryNullablePromise
  extends Promise<ProjectCategory | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ProjectCharacteristicPreviousValues {
  id: ID_Output;
  name: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface ProjectCharacteristicPreviousValuesPromise
  extends Promise<ProjectCharacteristicPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ProjectCharacteristicPreviousValuesSubscription
  extends Promise<AsyncIterator<ProjectCharacteristicPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProjectCharacteristicSubscriptionPayload {
  mutation: MutationType;
  node: ProjectCharacteristic;
  updatedFields: String[];
  previousValues: ProjectCharacteristicPreviousValues;
}

export interface ProjectCharacteristicSubscriptionPayloadPromise
  extends Promise<ProjectCharacteristicSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProjectCharacteristicPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProjectCharacteristicPreviousValuesPromise>() => T;
}

export interface ProjectCharacteristicSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProjectCharacteristicSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProjectCharacteristicSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProjectCharacteristicPreviousValuesSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ProjectCategoryPreviousValues {
  id: ID_Output;
  name: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface ProjectCategoryPreviousValuesPromise
  extends Promise<ProjectCategoryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ProjectCategoryPreviousValuesSubscription
  extends Promise<AsyncIterator<ProjectCategoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProjectCharacteristicEdge {
  node: ProjectCharacteristic;
  cursor: String;
}

export interface ProjectCharacteristicEdgePromise
  extends Promise<ProjectCharacteristicEdge>,
    Fragmentable {
  node: <T = ProjectCharacteristicPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProjectCharacteristicEdgeSubscription
  extends Promise<AsyncIterator<ProjectCharacteristicEdge>>,
    Fragmentable {
  node: <T = ProjectCharacteristicSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ProjectCharacteristicGroupEdge {
  node: ProjectCharacteristicGroup;
  cursor: String;
}

export interface ProjectCharacteristicGroupEdgePromise
  extends Promise<ProjectCharacteristicGroupEdge>,
    Fragmentable {
  node: <T = ProjectCharacteristicGroupPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProjectCharacteristicGroupEdgeSubscription
  extends Promise<AsyncIterator<ProjectCharacteristicGroupEdge>>,
    Fragmentable {
  node: <T = ProjectCharacteristicGroupSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface AggregateProjectCategory {
  count: Int;
}

export interface AggregateProjectCategoryPromise
  extends Promise<AggregateProjectCategory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProjectCategorySubscription
  extends Promise<AsyncIterator<AggregateProjectCategory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Project",
    embedded: false
  },
  {
    name: "ProjectCategory",
    embedded: false
  },
  {
    name: "ProjectCharacteristicGroup",
    embedded: false
  },
  {
    name: "ProjectCharacteristic",
    embedded: false
  },
  {
    name: "SourceOfItems",
    embedded: false
  },
  {
    name: "ProjectState",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `${process.env["PRISMA_ENDPOINT"]}`
});
export const prisma = new Prisma();
