// Code generated by Prisma (prisma@1.33.0). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateProject {
  count: Int!
}

type AggregateProjectCategory {
  count: Int!
}

type AggregateProjectCharacteristic {
  count: Int!
}

type AggregateProjectCharacteristicGroup {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createProject(data: ProjectCreateInput!): Project!
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateManyProjects(data: ProjectUpdateManyMutationInput!, where: ProjectWhereInput): BatchPayload!
  upsertProject(where: ProjectWhereUniqueInput!, create: ProjectCreateInput!, update: ProjectUpdateInput!): Project!
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteManyProjects(where: ProjectWhereInput): BatchPayload!
  createProjectCategory(data: ProjectCategoryCreateInput!): ProjectCategory!
  updateProjectCategory(data: ProjectCategoryUpdateInput!, where: ProjectCategoryWhereUniqueInput!): ProjectCategory
  updateManyProjectCategories(data: ProjectCategoryUpdateManyMutationInput!, where: ProjectCategoryWhereInput): BatchPayload!
  upsertProjectCategory(where: ProjectCategoryWhereUniqueInput!, create: ProjectCategoryCreateInput!, update: ProjectCategoryUpdateInput!): ProjectCategory!
  deleteProjectCategory(where: ProjectCategoryWhereUniqueInput!): ProjectCategory
  deleteManyProjectCategories(where: ProjectCategoryWhereInput): BatchPayload!
  createProjectCharacteristic(data: ProjectCharacteristicCreateInput!): ProjectCharacteristic!
  updateProjectCharacteristic(data: ProjectCharacteristicUpdateInput!, where: ProjectCharacteristicWhereUniqueInput!): ProjectCharacteristic
  updateManyProjectCharacteristics(data: ProjectCharacteristicUpdateManyMutationInput!, where: ProjectCharacteristicWhereInput): BatchPayload!
  upsertProjectCharacteristic(where: ProjectCharacteristicWhereUniqueInput!, create: ProjectCharacteristicCreateInput!, update: ProjectCharacteristicUpdateInput!): ProjectCharacteristic!
  deleteProjectCharacteristic(where: ProjectCharacteristicWhereUniqueInput!): ProjectCharacteristic
  deleteManyProjectCharacteristics(where: ProjectCharacteristicWhereInput): BatchPayload!
  createProjectCharacteristicGroup(data: ProjectCharacteristicGroupCreateInput!): ProjectCharacteristicGroup!
  updateProjectCharacteristicGroup(data: ProjectCharacteristicGroupUpdateInput!, where: ProjectCharacteristicGroupWhereUniqueInput!): ProjectCharacteristicGroup
  updateManyProjectCharacteristicGroups(data: ProjectCharacteristicGroupUpdateManyMutationInput!, where: ProjectCharacteristicGroupWhereInput): BatchPayload!
  upsertProjectCharacteristicGroup(where: ProjectCharacteristicGroupWhereUniqueInput!, create: ProjectCharacteristicGroupCreateInput!, update: ProjectCharacteristicGroupUpdateInput!): ProjectCharacteristicGroup!
  deleteProjectCharacteristicGroup(where: ProjectCharacteristicGroupWhereUniqueInput!): ProjectCharacteristicGroup
  deleteManyProjectCharacteristicGroups(where: ProjectCharacteristicGroupWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Project {
  id: ID!
  title: String!
  category: ProjectCategory!
  characteristics(where: ProjectCharacteristicWhereInput, orderBy: ProjectCharacteristicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectCharacteristic!]
  sourceOfItems: SourceOfItems!
  amountOfKidsHelped: Int!
  whyIsThisImportant: String!
  meaningToTheKids: String!
  microNeed: String!
  numberOfItems: Int!
  estimatedCost: Int!
  personalMessage: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type ProjectCategory {
  id: ID!
  name: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type ProjectCategoryConnection {
  pageInfo: PageInfo!
  edges: [ProjectCategoryEdge]!
  aggregate: AggregateProjectCategory!
}

input ProjectCategoryCreateInput {
  id: ID
  name: String!
}

input ProjectCategoryCreateOneInput {
  create: ProjectCategoryCreateInput
  connect: ProjectCategoryWhereUniqueInput
}

type ProjectCategoryEdge {
  node: ProjectCategory!
  cursor: String!
}

enum ProjectCategoryOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ProjectCategoryPreviousValues {
  id: ID!
  name: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type ProjectCategorySubscriptionPayload {
  mutation: MutationType!
  node: ProjectCategory
  updatedFields: [String!]
  previousValues: ProjectCategoryPreviousValues
}

input ProjectCategorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProjectCategoryWhereInput
  AND: [ProjectCategorySubscriptionWhereInput!]
  OR: [ProjectCategorySubscriptionWhereInput!]
  NOT: [ProjectCategorySubscriptionWhereInput!]
}

input ProjectCategoryUpdateDataInput {
  name: String
}

input ProjectCategoryUpdateInput {
  name: String
}

input ProjectCategoryUpdateManyMutationInput {
  name: String
}

input ProjectCategoryUpdateOneRequiredInput {
  create: ProjectCategoryCreateInput
  update: ProjectCategoryUpdateDataInput
  upsert: ProjectCategoryUpsertNestedInput
  connect: ProjectCategoryWhereUniqueInput
}

input ProjectCategoryUpsertNestedInput {
  update: ProjectCategoryUpdateDataInput!
  create: ProjectCategoryCreateInput!
}

input ProjectCategoryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [ProjectCategoryWhereInput!]
  OR: [ProjectCategoryWhereInput!]
  NOT: [ProjectCategoryWhereInput!]
}

input ProjectCategoryWhereUniqueInput {
  id: ID
}

type ProjectCharacteristic {
  id: ID!
  name: String!
  group: ProjectCharacteristicGroup
  updatedAt: DateTime!
  createdAt: DateTime!
}

type ProjectCharacteristicConnection {
  pageInfo: PageInfo!
  edges: [ProjectCharacteristicEdge]!
  aggregate: AggregateProjectCharacteristic!
}

input ProjectCharacteristicCreateInput {
  id: ID
  name: String!
  group: ProjectCharacteristicGroupCreateOneWithoutItemsInput
}

input ProjectCharacteristicCreateManyInput {
  create: [ProjectCharacteristicCreateInput!]
  connect: [ProjectCharacteristicWhereUniqueInput!]
}

input ProjectCharacteristicCreateManyWithoutGroupInput {
  create: [ProjectCharacteristicCreateWithoutGroupInput!]
  connect: [ProjectCharacteristicWhereUniqueInput!]
}

input ProjectCharacteristicCreateWithoutGroupInput {
  id: ID
  name: String!
}

type ProjectCharacteristicEdge {
  node: ProjectCharacteristic!
  cursor: String!
}

type ProjectCharacteristicGroup {
  id: ID!
  name: String!
  items(where: ProjectCharacteristicWhereInput, orderBy: ProjectCharacteristicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectCharacteristic!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

type ProjectCharacteristicGroupConnection {
  pageInfo: PageInfo!
  edges: [ProjectCharacteristicGroupEdge]!
  aggregate: AggregateProjectCharacteristicGroup!
}

input ProjectCharacteristicGroupCreateInput {
  id: ID
  name: String!
  items: ProjectCharacteristicCreateManyWithoutGroupInput
}

input ProjectCharacteristicGroupCreateOneWithoutItemsInput {
  create: ProjectCharacteristicGroupCreateWithoutItemsInput
  connect: ProjectCharacteristicGroupWhereUniqueInput
}

input ProjectCharacteristicGroupCreateWithoutItemsInput {
  id: ID
  name: String!
}

type ProjectCharacteristicGroupEdge {
  node: ProjectCharacteristicGroup!
  cursor: String!
}

enum ProjectCharacteristicGroupOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ProjectCharacteristicGroupPreviousValues {
  id: ID!
  name: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type ProjectCharacteristicGroupSubscriptionPayload {
  mutation: MutationType!
  node: ProjectCharacteristicGroup
  updatedFields: [String!]
  previousValues: ProjectCharacteristicGroupPreviousValues
}

input ProjectCharacteristicGroupSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProjectCharacteristicGroupWhereInput
  AND: [ProjectCharacteristicGroupSubscriptionWhereInput!]
  OR: [ProjectCharacteristicGroupSubscriptionWhereInput!]
  NOT: [ProjectCharacteristicGroupSubscriptionWhereInput!]
}

input ProjectCharacteristicGroupUpdateInput {
  name: String
  items: ProjectCharacteristicUpdateManyWithoutGroupInput
}

input ProjectCharacteristicGroupUpdateManyMutationInput {
  name: String
}

input ProjectCharacteristicGroupUpdateOneWithoutItemsInput {
  create: ProjectCharacteristicGroupCreateWithoutItemsInput
  update: ProjectCharacteristicGroupUpdateWithoutItemsDataInput
  upsert: ProjectCharacteristicGroupUpsertWithoutItemsInput
  delete: Boolean
  disconnect: Boolean
  connect: ProjectCharacteristicGroupWhereUniqueInput
}

input ProjectCharacteristicGroupUpdateWithoutItemsDataInput {
  name: String
}

input ProjectCharacteristicGroupUpsertWithoutItemsInput {
  update: ProjectCharacteristicGroupUpdateWithoutItemsDataInput!
  create: ProjectCharacteristicGroupCreateWithoutItemsInput!
}

input ProjectCharacteristicGroupWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  items_every: ProjectCharacteristicWhereInput
  items_some: ProjectCharacteristicWhereInput
  items_none: ProjectCharacteristicWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [ProjectCharacteristicGroupWhereInput!]
  OR: [ProjectCharacteristicGroupWhereInput!]
  NOT: [ProjectCharacteristicGroupWhereInput!]
}

input ProjectCharacteristicGroupWhereUniqueInput {
  id: ID
}

enum ProjectCharacteristicOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ProjectCharacteristicPreviousValues {
  id: ID!
  name: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

input ProjectCharacteristicScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [ProjectCharacteristicScalarWhereInput!]
  OR: [ProjectCharacteristicScalarWhereInput!]
  NOT: [ProjectCharacteristicScalarWhereInput!]
}

type ProjectCharacteristicSubscriptionPayload {
  mutation: MutationType!
  node: ProjectCharacteristic
  updatedFields: [String!]
  previousValues: ProjectCharacteristicPreviousValues
}

input ProjectCharacteristicSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProjectCharacteristicWhereInput
  AND: [ProjectCharacteristicSubscriptionWhereInput!]
  OR: [ProjectCharacteristicSubscriptionWhereInput!]
  NOT: [ProjectCharacteristicSubscriptionWhereInput!]
}

input ProjectCharacteristicUpdateDataInput {
  name: String
  group: ProjectCharacteristicGroupUpdateOneWithoutItemsInput
}

input ProjectCharacteristicUpdateInput {
  name: String
  group: ProjectCharacteristicGroupUpdateOneWithoutItemsInput
}

input ProjectCharacteristicUpdateManyDataInput {
  name: String
}

input ProjectCharacteristicUpdateManyInput {
  create: [ProjectCharacteristicCreateInput!]
  update: [ProjectCharacteristicUpdateWithWhereUniqueNestedInput!]
  upsert: [ProjectCharacteristicUpsertWithWhereUniqueNestedInput!]
  delete: [ProjectCharacteristicWhereUniqueInput!]
  connect: [ProjectCharacteristicWhereUniqueInput!]
  set: [ProjectCharacteristicWhereUniqueInput!]
  disconnect: [ProjectCharacteristicWhereUniqueInput!]
  deleteMany: [ProjectCharacteristicScalarWhereInput!]
  updateMany: [ProjectCharacteristicUpdateManyWithWhereNestedInput!]
}

input ProjectCharacteristicUpdateManyMutationInput {
  name: String
}

input ProjectCharacteristicUpdateManyWithoutGroupInput {
  create: [ProjectCharacteristicCreateWithoutGroupInput!]
  delete: [ProjectCharacteristicWhereUniqueInput!]
  connect: [ProjectCharacteristicWhereUniqueInput!]
  set: [ProjectCharacteristicWhereUniqueInput!]
  disconnect: [ProjectCharacteristicWhereUniqueInput!]
  update: [ProjectCharacteristicUpdateWithWhereUniqueWithoutGroupInput!]
  upsert: [ProjectCharacteristicUpsertWithWhereUniqueWithoutGroupInput!]
  deleteMany: [ProjectCharacteristicScalarWhereInput!]
  updateMany: [ProjectCharacteristicUpdateManyWithWhereNestedInput!]
}

input ProjectCharacteristicUpdateManyWithWhereNestedInput {
  where: ProjectCharacteristicScalarWhereInput!
  data: ProjectCharacteristicUpdateManyDataInput!
}

input ProjectCharacteristicUpdateWithoutGroupDataInput {
  name: String
}

input ProjectCharacteristicUpdateWithWhereUniqueNestedInput {
  where: ProjectCharacteristicWhereUniqueInput!
  data: ProjectCharacteristicUpdateDataInput!
}

input ProjectCharacteristicUpdateWithWhereUniqueWithoutGroupInput {
  where: ProjectCharacteristicWhereUniqueInput!
  data: ProjectCharacteristicUpdateWithoutGroupDataInput!
}

input ProjectCharacteristicUpsertWithWhereUniqueNestedInput {
  where: ProjectCharacteristicWhereUniqueInput!
  update: ProjectCharacteristicUpdateDataInput!
  create: ProjectCharacteristicCreateInput!
}

input ProjectCharacteristicUpsertWithWhereUniqueWithoutGroupInput {
  where: ProjectCharacteristicWhereUniqueInput!
  update: ProjectCharacteristicUpdateWithoutGroupDataInput!
  create: ProjectCharacteristicCreateWithoutGroupInput!
}

input ProjectCharacteristicWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  group: ProjectCharacteristicGroupWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [ProjectCharacteristicWhereInput!]
  OR: [ProjectCharacteristicWhereInput!]
  NOT: [ProjectCharacteristicWhereInput!]
}

input ProjectCharacteristicWhereUniqueInput {
  id: ID
}

type ProjectConnection {
  pageInfo: PageInfo!
  edges: [ProjectEdge]!
  aggregate: AggregateProject!
}

input ProjectCreateInput {
  id: ID
  title: String!
  category: ProjectCategoryCreateOneInput!
  characteristics: ProjectCharacteristicCreateManyInput
  sourceOfItems: SourceOfItems!
  amountOfKidsHelped: Int!
  whyIsThisImportant: String!
  meaningToTheKids: String!
  microNeed: String!
  numberOfItems: Int!
  estimatedCost: Int!
  personalMessage: String!
}

type ProjectEdge {
  node: Project!
  cursor: String!
}

enum ProjectOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  sourceOfItems_ASC
  sourceOfItems_DESC
  amountOfKidsHelped_ASC
  amountOfKidsHelped_DESC
  whyIsThisImportant_ASC
  whyIsThisImportant_DESC
  meaningToTheKids_ASC
  meaningToTheKids_DESC
  microNeed_ASC
  microNeed_DESC
  numberOfItems_ASC
  numberOfItems_DESC
  estimatedCost_ASC
  estimatedCost_DESC
  personalMessage_ASC
  personalMessage_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ProjectPreviousValues {
  id: ID!
  title: String!
  sourceOfItems: SourceOfItems!
  amountOfKidsHelped: Int!
  whyIsThisImportant: String!
  meaningToTheKids: String!
  microNeed: String!
  numberOfItems: Int!
  estimatedCost: Int!
  personalMessage: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type ProjectSubscriptionPayload {
  mutation: MutationType!
  node: Project
  updatedFields: [String!]
  previousValues: ProjectPreviousValues
}

input ProjectSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProjectWhereInput
  AND: [ProjectSubscriptionWhereInput!]
  OR: [ProjectSubscriptionWhereInput!]
  NOT: [ProjectSubscriptionWhereInput!]
}

input ProjectUpdateInput {
  title: String
  category: ProjectCategoryUpdateOneRequiredInput
  characteristics: ProjectCharacteristicUpdateManyInput
  sourceOfItems: SourceOfItems
  amountOfKidsHelped: Int
  whyIsThisImportant: String
  meaningToTheKids: String
  microNeed: String
  numberOfItems: Int
  estimatedCost: Int
  personalMessage: String
}

input ProjectUpdateManyMutationInput {
  title: String
  sourceOfItems: SourceOfItems
  amountOfKidsHelped: Int
  whyIsThisImportant: String
  meaningToTheKids: String
  microNeed: String
  numberOfItems: Int
  estimatedCost: Int
  personalMessage: String
}

input ProjectWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  category: ProjectCategoryWhereInput
  characteristics_every: ProjectCharacteristicWhereInput
  characteristics_some: ProjectCharacteristicWhereInput
  characteristics_none: ProjectCharacteristicWhereInput
  sourceOfItems: SourceOfItems
  sourceOfItems_not: SourceOfItems
  sourceOfItems_in: [SourceOfItems!]
  sourceOfItems_not_in: [SourceOfItems!]
  amountOfKidsHelped: Int
  amountOfKidsHelped_not: Int
  amountOfKidsHelped_in: [Int!]
  amountOfKidsHelped_not_in: [Int!]
  amountOfKidsHelped_lt: Int
  amountOfKidsHelped_lte: Int
  amountOfKidsHelped_gt: Int
  amountOfKidsHelped_gte: Int
  whyIsThisImportant: String
  whyIsThisImportant_not: String
  whyIsThisImportant_in: [String!]
  whyIsThisImportant_not_in: [String!]
  whyIsThisImportant_lt: String
  whyIsThisImportant_lte: String
  whyIsThisImportant_gt: String
  whyIsThisImportant_gte: String
  whyIsThisImportant_contains: String
  whyIsThisImportant_not_contains: String
  whyIsThisImportant_starts_with: String
  whyIsThisImportant_not_starts_with: String
  whyIsThisImportant_ends_with: String
  whyIsThisImportant_not_ends_with: String
  meaningToTheKids: String
  meaningToTheKids_not: String
  meaningToTheKids_in: [String!]
  meaningToTheKids_not_in: [String!]
  meaningToTheKids_lt: String
  meaningToTheKids_lte: String
  meaningToTheKids_gt: String
  meaningToTheKids_gte: String
  meaningToTheKids_contains: String
  meaningToTheKids_not_contains: String
  meaningToTheKids_starts_with: String
  meaningToTheKids_not_starts_with: String
  meaningToTheKids_ends_with: String
  meaningToTheKids_not_ends_with: String
  microNeed: String
  microNeed_not: String
  microNeed_in: [String!]
  microNeed_not_in: [String!]
  microNeed_lt: String
  microNeed_lte: String
  microNeed_gt: String
  microNeed_gte: String
  microNeed_contains: String
  microNeed_not_contains: String
  microNeed_starts_with: String
  microNeed_not_starts_with: String
  microNeed_ends_with: String
  microNeed_not_ends_with: String
  numberOfItems: Int
  numberOfItems_not: Int
  numberOfItems_in: [Int!]
  numberOfItems_not_in: [Int!]
  numberOfItems_lt: Int
  numberOfItems_lte: Int
  numberOfItems_gt: Int
  numberOfItems_gte: Int
  estimatedCost: Int
  estimatedCost_not: Int
  estimatedCost_in: [Int!]
  estimatedCost_not_in: [Int!]
  estimatedCost_lt: Int
  estimatedCost_lte: Int
  estimatedCost_gt: Int
  estimatedCost_gte: Int
  personalMessage: String
  personalMessage_not: String
  personalMessage_in: [String!]
  personalMessage_not_in: [String!]
  personalMessage_lt: String
  personalMessage_lte: String
  personalMessage_gt: String
  personalMessage_gte: String
  personalMessage_contains: String
  personalMessage_not_contains: String
  personalMessage_starts_with: String
  personalMessage_not_starts_with: String
  personalMessage_ends_with: String
  personalMessage_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
}

input ProjectWhereUniqueInput {
  id: ID
}

type Query {
  project(where: ProjectWhereUniqueInput!): Project
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project]!
  projectsConnection(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectConnection!
  projectCategory(where: ProjectCategoryWhereUniqueInput!): ProjectCategory
  projectCategories(where: ProjectCategoryWhereInput, orderBy: ProjectCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectCategory]!
  projectCategoriesConnection(where: ProjectCategoryWhereInput, orderBy: ProjectCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectCategoryConnection!
  projectCharacteristic(where: ProjectCharacteristicWhereUniqueInput!): ProjectCharacteristic
  projectCharacteristics(where: ProjectCharacteristicWhereInput, orderBy: ProjectCharacteristicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectCharacteristic]!
  projectCharacteristicsConnection(where: ProjectCharacteristicWhereInput, orderBy: ProjectCharacteristicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectCharacteristicConnection!
  projectCharacteristicGroup(where: ProjectCharacteristicGroupWhereUniqueInput!): ProjectCharacteristicGroup
  projectCharacteristicGroups(where: ProjectCharacteristicGroupWhereInput, orderBy: ProjectCharacteristicGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectCharacteristicGroup]!
  projectCharacteristicGroupsConnection(where: ProjectCharacteristicGroupWhereInput, orderBy: ProjectCharacteristicGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectCharacteristicGroupConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

enum SourceOfItems {
  LOCAL
  DIRECT
  OTHER
}

type Subscription {
  project(where: ProjectSubscriptionWhereInput): ProjectSubscriptionPayload
  projectCategory(where: ProjectCategorySubscriptionWhereInput): ProjectCategorySubscriptionPayload
  projectCharacteristic(where: ProjectCharacteristicSubscriptionWhereInput): ProjectCharacteristicSubscriptionPayload
  projectCharacteristicGroup(where: ProjectCharacteristicGroupSubscriptionWhereInput): ProjectCharacteristicGroupSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  email: String!
  displayName: String
  firstName: String!
  lastName: String!
  password: String!
  userGroup: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String!
  displayName: String
  firstName: String!
  lastName: String!
  password: String!
  userGroup: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  displayName_ASC
  displayName_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  password_ASC
  password_DESC
  userGroup_ASC
  userGroup_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  displayName: String
  firstName: String!
  lastName: String!
  password: String!
  userGroup: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  displayName: String
  firstName: String
  lastName: String
  password: String
  userGroup: String
}

input UserUpdateManyMutationInput {
  email: String
  displayName: String
  firstName: String
  lastName: String
  password: String
  userGroup: String
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  displayName: String
  displayName_not: String
  displayName_in: [String!]
  displayName_not_in: [String!]
  displayName_lt: String
  displayName_lte: String
  displayName_gt: String
  displayName_gte: String
  displayName_contains: String
  displayName_not_contains: String
  displayName_starts_with: String
  displayName_not_starts_with: String
  displayName_ends_with: String
  displayName_not_ends_with: String
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  userGroup: String
  userGroup_not: String
  userGroup_in: [String!]
  userGroup_not_in: [String!]
  userGroup_lt: String
  userGroup_lte: String
  userGroup_gt: String
  userGroup_gte: String
  userGroup_contains: String
  userGroup_not_contains: String
  userGroup_starts_with: String
  userGroup_not_starts_with: String
  userGroup_ends_with: String
  userGroup_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`