directive @isOwner on FIELD_DEFINITION
directive @isAdmin on FIELD_DEFINITION
directive @isLoggedIn(status: Boolean) on FIELD_DEFINITION

type Query {
  user(id: ID!): User

  getProjectFeed: ProjectFeed!
  getAdminProjectFeed: ProjectFeed! @isAdmin
  projectCategories: [ProjectCategory!]!
  projectCharacteristicGroups: [ProjectCharacteristicGroup!]!
  getProject(input: GetProjectInput!): GetProjectPayload!
}

type Mutation {
  signup(input: SignupInput!): SignupPayload! @isLoggedIn(status: false)
  login(input: LoginInput!): LoginPayload @isLoggedIn(status: false)
  logout: Boolean!

  createProject(input: CreateProjectInput!): CreateProjectPayload!
    @isLoggedIn(status: true)
}

type User {
  id: ID!
  userGroup: String!
  email: String! @isOwner
  firstName: String!
  lastName: String!
  displayName: String
}

input SignupInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  group: String!
}

input LoginInput {
  email: String!
  password: String!
}

type SignupPayload {
  user: User!
}

type LoginPayload {
  user: User!
}

input CreateProjectInput {
  title: String!
  categoryId: ID!
  sourceOfItems: SourceOfItems!
  amountOfKidsHelped: Int!
  whyIsThisImportant: String!
  meaningToTheKids: String!
  microNeed: String!
  numberOfItems: Int!
  characteristicIds: [ID!]!
  estimatedCost: Int!
  personalMessage: String!
}

type CreateProjectPayload {
  project: Project!
}

type Project {
  id: ID!
  title: String!
  category: ProjectCategory!
  sourceOfItems: SourceOfItems!
  amountOfKidsHelped: Int!
  whyIsThisImportant: String!
  meaningToTheKids: String!
  microNeed: String!
  numberOfItems: Int!
  characteristics: [ProjectCharacteristic!]!
  estimatedCost: Int!
  personalMessage: String!
  state: ProjectState!
}

type ProjectCategory {
  id: ID!
  name: String!
}

type ProjectFeed {
  projects: [Project!]!
}

type ProjectCharacteristicGroup {
  id: ID!
  name: String!
  items: [ProjectCharacteristic!]!
}

type ProjectCharacteristic {
  id: ID!
  name: String!
}

input GetProjectInput {
  id: ID!
}

type GetProjectPayload {
  project: Project!
}

enum SourceOfItems {
  LOCAL
  DIRECT
  OTHER
}

enum ProjectState {
  PENDING
  APPROVED
  SOLVING
  COMPLETED
}
