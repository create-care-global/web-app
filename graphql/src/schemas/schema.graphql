# import Query.* from "authentication.graphql"
# import Mutation.* from "authentication.graphql"

type Query {
  getProjectFeed: GetProjectFeedPayload!
  projectCategories: [ProjectCategory!]!
  projectCharacteristicGroups: [ProjectCharacteristicGroup!]!
  getProject(input: GetProjectInput!): GetProjectPayload!
}

type Mutation {
  createProject(input: CreateProjectInput!): CreateProjectPayload!
}

input CreateProjectInput {
  title: String!
  categoryId: ID!
  sourceOfItems: SourceOfItems!
  amountOfKidsHelped: Int!
  whyIsThisImportant: String!
  meaningToTheKids: String!
  microNeed: String!
  numberOfItems: Int!
  characteristicIds: [ID!]!
}

type CreateProjectPayload {
  project: Project!
}

type Project {
  id: ID!
  title: String!
  category: ProjectCategory!
  sourceOfItems: SourceOfItems!
  amountOfKidsHelped: Int!
  whyIsThisImportant: String!
  meaningToTheKids: String!
  microNeed: String!
  numberOfItems: Int!
  characteristics: [ProjectCharacteristic!]!
  estimatedCost: Int!
  personalMessage: String!
}

type ProjectCategory {
  id: ID!
  name: String!
}

type GetProjectFeedPayload {
  projects: [Project!]!
}

type ProjectCharacteristicGroup {
  id: ID!
  name: String!
  items: [ProjectCharacteristic!]!
}

type ProjectCharacteristic {
  id: ID!
  name: String!
}

input GetProjectInput {
  id: ID!
}

type GetProjectPayload {
  project: Project!
}

enum SourceOfItems {
  LOCAL
  DIRECT
  OTHER
}
